#!/bin/sh

#
# OPENSHIFT_MONIT_REPAIR: Repair mode
#	0: Only send advices.
#	1: Send advices and restart services. 
#	2: Restart services and also try to repair mongo.
# OPENSHIFT_MONIT_MONGOQUOTA: Percentage of storage quota for mongodb gear to send advices.
# OPENSHIFT_MONIT_MONGOMAXQUOTA: Percentage of storage quota for mongodb gear to try to repair db (if repair is set to 2).
# OPENSHIFT_MONIT_INODEQUOTA: Percentage of inode quota for any gear to send advices.
# OPENSHIFT_MONIT_NODEJSQUOTA: Percentage of storage quota for nodejs gear to send advices.
# OPENSHIFT_MONIT_MEMORYQUOTA: Percentage of memory quota for nodejs gear to send advices.
# OPENSHIFT_MONIT_SLACK_WEBHOOK: Slack WebHook Path to send advices to slack via incoming webhook connector.
#

# Utilities
float_test () { 
    awk 'END { exit ( !( '"$1"')); }' < /dev/null
}
# Slack advices
function slack() {
	curl -X POST --data-urlencode 'payload={"channel": "#general", "username": "monit", "text": "'"$1"'", "icon_emoji": ":warning:"}' https://hooks.slack.com/services/${OPENSHIFT_MONIT_SLACK_WEBHOOK} >/dev/null 2>&1
}
# Mongo Query
function mongoquery() {
	mongo -u $OPENSHIFT_MONGODB_DB_USERNAME -p $OPENSHIFT_MONGODB_DB_PASSWORD --host $OPENSHIFT_MONGODB_DB_HOST --port $OPENSHIFT_MONGODB_DB_PORT $OPENSHIFT_APP_NAME --eval "$1" | tail -1
}

# Checking MONGODB Available
function checkMongoUp() {
	local mongoup=$(mongoquery "db.rooms.find().count();");
	case $mongoup in
    	''|*[!0-9]*) slack "Warning: Mongo is down in ${OPENSHIFT_APP_NAME}";
			if float_test "${OPENSHIFT_MONIT_REPAIR} > 0"; then
				slack "Restarting Mongo in ${OPENSHIFT_APP_NAME} automatically.";
				ssh ${OPENSHIFT_MONGODB_DB_GEAR_UUID}@${OPENSHIFT_MONGODB_DB_HOST} '"ctl_all" restart 2>/dev/null 1>&2';
			fi;;
	esac
}

# Checking MONGODB Usage
function checkMongoQuota() {
	local usage=$(ssh ${OPENSHIFT_MONGODB_DB_GEAR_UUID}@${OPENSHIFT_MONGODB_DB_HOST} '"quota" -w 2>/dev/null' | grep '^.*/dev/' | awk '{printf "%3.1f", ($2 / $4 * 100)}');
	if float_test "${usage:-0} > $1"; then
		slack "Warning: Mongo in ${OPENSHIFT_APP_NAME} is using ${usage}% of disk quota";
		if float_test "${OPENSHIFT_MONIT_REPAIR} == 2"; then
			if float_test "${usage:-0} > $2"; then
				mongoquery "db.logs.remove({});db.sessions.remove({});db.repairDatabase();";
				local newusage=$(ssh ${OPENSHIFT_MONGODB_DB_GEAR_UUID}@${OPENSHIFT_MONGODB_DB_HOST} '"quota" -w 2>/dev/null' | grep '^.*/dev/' | awk '{printf "%3.1f", ($2 / $4 * 100)}');
				slack "Repaired: Mongo in ${OPENSHIFT_APP_NAME} now is using ${newusage}% of disk quota";
			fi;
		fi;
	fi;
	local usage=$(ssh ${OPENSHIFT_MONGODB_DB_GEAR_UUID}@${OPENSHIFT_MONGODB_DB_HOST} '"quota" -w 2>/dev/null' | grep '^.*/dev/' | awk '{printf "%3.1f",  ($5 / $7 * 100)}');
	if float_test "${usage:-0} > $3"; then
		slack "Warning: Mongo in ${OPENSHIFT_APP_NAME} is using ${usage}% of inodes allowed";
	fi;
}

# Checking NodeJS Usage
function checkLocalQuota() {
	local usage=$(quota -w 2>/dev/null| grep '^.*/dev/' | awk '{printf "%3.1f", ($2 / $4 * 100)}');
	if float_test "${usage:-0} > $1"; then
		slack "Warning: Gear ${OPENSHIFT_GEAR_UUID} of ${OPENSHIFT_APP_NAME} is using ${usage}% of disk quota";
	fi;
	local usage=$(quota -w 2>/dev/null| grep '^.*/dev/' | awk '{printf "%3.1f",  ($5 / $7 * 100)}');
	if float_test "${usage:-0} > $2"; then
		slack "Warning: Gear ${OPENSHIFT_GEAR_UUID} of ${OPENSHIFT_APP_NAME} is using ${usage}% of inodes allowed";
	fi;
	local memousage=$(awk "BEGIN{printf \"%i\", $(oo-cgroup-read memory.usage_in_bytes) / $(oo-cgroup-read memory.limit_in_bytes) * 100}");
	if float_test "${memousage:-0} > $3"; then
		slack "Warning: Gear ${OPENSHIFT_GEAR_UUID} of ${OPENSHIFT_APP_NAME} is using ${memousage}% of memory";
	fi;	
}

# Checking WEB Active
function checkWebStatus() {
	local upweb=$(wget -O - https://${OPENSHIFT_GEAR_DNS}/ 2>/dev/null | grep 'loowidVersion' | wc -l);
	if float_test "${upweb} == 0"; then
		slack "Warning: Service ${OPENSHIFT_APP_NAME} is down!" 1>&2;
		if float_test "${OPENSHIFT_MONIT_REPAIR} > 0"; then
			slack "Restarting ${OPENSHIFT_APP_NAME} automatically.";
			ctl_all restart 
		fi;
	fi;
}

checkMongoUp
checkMongoQuota "${OPENSHIFT_MONIT_MONGOQUOTA}" "${OPENSHIFT_MONIT_MONGOMAXQUOTA}" "${OPENSHIFT_MONIT_INODEQUOTA}"
checkLocalQuota "${OPENSHIFT_MONIT_NODEJSQUOTA}" "${OPENSHIFT_MONIT_INODEQUOTA}" "${OPENSHIFT_MONIT_MEMORYQUOTA}" 
checkWebStatus
